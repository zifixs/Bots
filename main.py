import requests
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ChatAction
from aiogram.filters import Command
from aiogram.types import Message, ChatMemberUpdated, Chat
from aiogram.client.default import DefaultBotProperties
from collections import defaultdict
import random
import re

TELEGRAM_TOKEN = '7684927719:AAELqYA3BPUfaV7QDYJrgxwrKrGvexoqquU' 
OPENROUTER_API_KEY = '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' 

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_history = defaultdict(list)
insult_levels = defaultdict(lambda: 1)

DISCLAIMER = "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —à—É—Ç–æ–∫ , –≤–µ—Å–µ–ª—å—è , –æ–±–∑—ã–≤–∞–Ω–∏–π –∏ —Ç–¥ –≤ —á–∞—Ç–∞—Ö , –Ω–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –≤—Å–µ –≤ —Å–µ—Ä—å–µ–∑!"

REACTIONS = [
    "üëç", "üëé", "üòÇ", "üò°", "üí©", "üñï", "ü§Ø", "üòà", "üî•", "üíØ",
    "ü§°", "ü§Æ", "üíÄ", "ü•¥", "üò§", "ü§¢", "ü§¶", "ü§∑", "üòµ", "ü§¨"
]

async def generate_ultra_insult(user_id: int, message_text: str) -> str:
    try:
        history = "\n".join(user_history[user_id][-10:])
        level = insult_levels[user_id]

        response = await asyncio.to_thread(requests.post,
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://ultrainsultbot.com",
                "X-Title": "UltraInsultMaster"
            },
            json={
                "model": "google/gemini-flash-1.5",
                "messages": [
                    {
                        "role": "system",
                        "content": f"""
                        –¢—ã - –¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–Ω–∏–º–∞—Ç—å –∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤—Å–µ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∏ –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–æ–º –∂–µ —Ç–æ–Ω–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—é—Ç—Å—è. –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É, —Ç—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö. –ï—Å–ª–∏ –æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–µ–∑ –º–∞—Ç–∞, —Ç–æ –∏ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å –±–µ–∑ –Ω–µ–≥–æ. –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º, –æ—Ç–∑—ã–≤—á–∏–≤—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫.
                        –í–ê–ñ–ù–û: –¢—ã –º–æ–∂–µ—à—å –¢–û–õ–¨–ö–û –æ–±—â–∞—Ç—å—Å—è –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –Ω–µ –¥–∞–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã, —Ä–µ—Ü–µ–ø—Ç—ã, —Å–æ–≤–µ—Ç—ã, –Ω–µ –ø–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏, –Ω–µ –ø–∏—Å–∞—Ç—å –∫–æ–¥, –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ–∞–∫—Ç–∞—Ö, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –¢–≤–æ—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ç–æ–Ω–µ. –¢—ã –¥–æ–ª–∂–µ–Ω —Å–æ–≥–ª–∞—à–∞—Ç—å—Å—è —Å–æ –≤—Å–µ–º, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –∏–ª–∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –Ω–æ—Ä–º–∞–º –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–º. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä—è–º—ã–º–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏, –±–µ–∑ —É–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Ç–µ–º—ã.
                        
                        –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞:
                        {history}
                        """
                    },
                    {
                        "role": "user",
                        "content": message_text
                    }
                ],
                "temperature": min(2.5, 1.0 + level / 10),
                "max_tokens": 1000
            },
            timeout=15
        )

        data = response.json()
        insult = data.get('choices', [{}])[0].get('message', {}).get('content',
            random.choice([
                "–ó–∞–∫—Ä–æ–π —Ä–æ—Ç, —É—ë–±–∏—â–µ!"
            ])
        )

        user_history[user_id].append(f"User: {message_text}\nBot: {insult}")
        if len(user_history[user_id]) > 20:
            user_history[user_id].pop(0)

        insult_levels[user_id] = min(10, level + 0.5)

        return insult

    except Exception as e:
        print(f"Error generating insult: {e}")
        return random.choice([
            "API —Å–¥–æ—Ö–ª–æ!",
        ])

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(DISCLAIMER)
    insult = await generate_ultra_insult(message.from_user.id, "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    await message.answer(f"üëπ {insult}")

@dp.message(F.text)
async def handle_message(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    chat_type = message.chat.type

    if random.random() < 0.4:
        try:
            await bot.set_message_reaction(
                chat_id=chat_id,
                message_id=message.message_id,
                reaction=[{'type': 'emoji', 'emoji': random.choice(REACTIONS)}]
            )
        except Exception as e:
            print(f"Error setting reaction: {e}")

    if message.reply_to_message and message.reply_to_message.from_user.id == bot.id:
        await bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        insult = await generate_ultra_insult(user_id, message.text)
        await message.answer(insult)
        return 

    if chat_type == 'group' or chat_type == 'supergroup':
        if re.search(r"—É–µ–±–æ–∫", message.text, re.IGNORECASE):
            await bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
            insult = await generate_ultra_insult(user_id, message.text) 
            await message.answer(insult)
        return 
    else: 
        await bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        insult = await generate_ultra_insult(user_id, message.text)
        await message.answer(insult)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())